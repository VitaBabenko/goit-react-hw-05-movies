{"version":3,"file":"static/js/708.82b92b07.chunk.js","mappings":"mQAEMA,EAAe,mCAAG,WAAMC,GAAN,6EACL,+BACD,mCAFM,SAICC,EAAAA,EAAAA,IAAA,UAHN,+BAGM,kBACAD,EADA,4BAFP,mCAEO,2BAJD,cAIhBE,EAJgB,yBAQfA,GARe,2CAAH,sDAWrB,I,mBCXaC,EAAOC,EAAAA,GAAAA,GAAH,wOAcJC,EAAOD,EAAAA,GAAAA,EAAH,yC,SCUjB,EAvBoB,SAAC,GAAiB,IAAfE,EAAc,EAAdA,QACrB,OACE,SAACH,EAAD,UACGG,EAAQC,KAAI,SAAAC,GAAM,OACjB,2BACE,wBAAKA,EAAOC,UACZ,SAACJ,EAAD,UAAOG,EAAOE,YAFPF,EAAOG,GADC,KAQxB,E,UCZYC,EAAaR,EAAAA,GAAAA,GAAH,wHCoCvB,EA/BgB,WACd,IAAQJ,GAAYa,EAAAA,EAAAA,MAAZb,QACR,GAA8Bc,EAAAA,EAAAA,UAAS,IAAvC,eAAOR,EAAP,KAAgBS,EAAhB,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACRH,GAAW,GACXF,EAAW,IAEXhB,EAAgBC,GACbqB,MAAK,SAAAC,GACJ,OAAuC,IAAhCA,EAAQC,KAAKC,QAAQC,OACxBC,QAAQC,OACN,IAAIC,MAAM,8CAEZb,EAAWO,EAAQC,KAAKC,QAC7B,IACAK,OAAM,SAAAX,GAAK,OAAIC,EAASD,EAAb,IACXY,SAAQ,kBAAMb,GAAW,EAAjB,GACZ,GAAE,CAACjB,KAGF,gCACGgB,IAAW,SAACe,EAAA,EAAD,IACXb,IAAS,SAACN,EAAD,UAAaM,EAAMc,WAC7B,SAAC,EAAD,CAAa1B,QAASA,MAG3B,C","sources":["services/GetMovieReviews.jsx","components/reviewsList/ReviewsList.styled.jsx","components/reviewsList/ReviewsList.jsx","components/reviews/Reviews.styled.jsx","components/reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst GetMovieReviews = async movieId => {\n  const BASE_URL = 'https://api.themoviedb.org/3';\n  const API_KEY = '2ec93d095b3f7dd7321ac567053c0ad5';\n\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return response;\n};\n\nexport default GetMovieReviews;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  /* justify-content: center; */\n  margin-left: auto;\n  margin-right: auto;\n  text-align: center;\n\n  list-style: none;\n  padding: 0;\n\n  max-width: 300px;\n`;\n\nexport const Text = styled.p`\n  padding: 8px;\n`;\n","import PropTypes from 'prop-types';\nimport { List, Text } from './ReviewsList.styled';\n\nconst ReviewsList = ({ reviews }) => {\n  return (\n    <List>\n      {reviews.map(review => (\n        <li key={review.id}>\n          <h3>{review.author}</h3>\n          <Text>{review.content}</Text>\n        </li>\n      ))}\n    </List>\n  );\n};\n\nReviewsList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      author: PropTypes.string,\n      content: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default ReviewsList;\n","import styled from 'styled-components';\n\nexport const ErrorTitle = styled.h2`\n  font-size: 15px;\n\n  text-align: center;\n  font-family: inherit;\n  /* font-size: 20px; */\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport GetMovieReviews from '../../services/GetMovieReviews';\nimport ReviewsList from '../reviewsList/ReviewsList';\nimport Loader from '../loader/Loader';\nimport { ErrorTitle } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    setReviews([]);\n\n    GetMovieReviews(movieId)\n      .then(respRev => {\n        return respRev.data.results.length === 0\n          ? Promise.reject(\n              new Error('We don`t have any reviews for this movie.')\n            )\n          : setReviews(respRev.data.results);\n      })\n      .catch(error => setError(error))\n      .finally(() => setLoading(false));\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {error && <ErrorTitle>{error.message}</ErrorTitle>}\n      <ReviewsList reviews={reviews} />\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["GetMovieReviews","movieId","axios","response","List","styled","Text","reviews","map","review","author","content","id","ErrorTitle","useParams","useState","setReviews","loading","setLoading","error","setError","useEffect","then","respRev","data","results","length","Promise","reject","Error","catch","finally","Loader","message"],"sourceRoot":""}