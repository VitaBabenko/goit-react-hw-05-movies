{"version":3,"file":"static/js/708.a997c546.chunk.js","mappings":"mQAEMA,EAAe,mCAAG,WAAMC,GAAN,6EACL,+BACD,mCAFM,SAICC,EAAAA,EAAAA,IAAA,UAHN,+BAGM,kBACAD,EADA,4BAFP,mCAEO,2BAJD,cAIhBE,EAJgB,yBAQfA,GARe,2CAAH,sDAWrB,I,mBCXaC,EAAOC,EAAAA,GAAAA,GAAH,gVAoBJC,EAAOD,EAAAA,GAAAA,EAAH,oJ,SCIjB,EAvBoB,SAAC,GAAiB,IAAfE,EAAc,EAAdA,QACrB,OACE,SAACH,EAAD,UACGG,EAAQC,KAAI,SAAAC,GAAM,OACjB,2BACE,wBAAKA,EAAOC,UACZ,SAACJ,EAAD,UAAOG,EAAOE,YAFPF,EAAOG,GADC,KAQxB,E,UCZYC,EAAaR,EAAAA,GAAAA,GAAH,wJCmCvB,EA9BgB,WACd,IAAQJ,GAAYa,EAAAA,EAAAA,MAAZb,QACR,GAA8Bc,EAAAA,EAAAA,UAAS,IAAvC,eAAOR,EAAP,KAAgBS,EAAhB,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACRH,GAAW,GACXF,EAAW,IACXhB,EAAgBC,GACbqB,MAAK,SAAAC,GACJ,OAAuC,IAAhCA,EAAQC,KAAKC,QAAQC,OACxBC,QAAQC,OACN,IAAIC,MAAM,8CAEZb,EAAWO,EAAQC,KAAKC,QAC7B,IACAK,OAAM,SAAAX,GAAK,OAAIC,EAASD,EAAb,IACXY,SAAQ,kBAAMb,GAAW,EAAjB,GACZ,GAAE,CAACjB,KAGF,gCACGgB,IAAW,SAACe,EAAA,EAAD,IACXb,IAAS,SAACN,EAAD,UAAaM,EAAMc,WAC7B,SAAC,EAAD,CAAa1B,QAASA,MAG3B,C","sources":["services/GetMovieReviews.jsx","components/reviewsList/ReviewsList.styled.jsx","components/reviewsList/ReviewsList.jsx","components/reviews/Reviews.styled.jsx","components/reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst GetMovieReviews = async movieId => {\r\n  const BASE_URL = 'https://api.themoviedb.org/3';\r\n  const API_KEY = '2ec93d095b3f7dd7321ac567053c0ad5';\r\n\r\n  const response = await axios.get(\r\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\r\n  );\r\n\r\n  return response;\r\n};\r\n\r\nexport default GetMovieReviews;\r\n","import styled from 'styled-components';\r\n\r\nexport const List = styled.ul`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 0;\r\n  text-align: center;\r\n  list-style: none;\r\n  padding: 0;\r\n  max-width: 300px;\r\n\r\n  @media (min-width: 768px) {\r\n    max-width: 750px;\r\n  }\r\n\r\n  @media (min-width: 1200px) {\r\n    max-width: 1200px;\r\n  }\r\n`;\r\n\r\nexport const Text = styled.p`\r\n  padding: 8px;\r\n  margin-top: 0;\r\n\r\n  @media (min-width: 768px) {\r\n    padding-left: 20px;\r\n    padding-right: 20px;\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { List, Text } from './ReviewsList.styled';\r\n\r\nconst ReviewsList = ({ reviews }) => {\r\n  return (\r\n    <List>\r\n      {reviews.map(review => (\r\n        <li key={review.id}>\r\n          <h3>{review.author}</h3>\r\n          <Text>{review.content}</Text>\r\n        </li>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nReviewsList.propTypes = {\r\n  reviews: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      author: PropTypes.string,\r\n      content: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default ReviewsList;\r\n","import styled from 'styled-components';\r\n\r\nexport const ErrorTitle = styled.h2`\r\n  font-size: 15px;\r\n  text-align: center;\r\n  font-family: inherit;\r\n\r\n  @media (min-width: 768px) {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport GetMovieReviews from '../../services/GetMovieReviews';\r\nimport ReviewsList from '../reviewsList/ReviewsList';\r\nimport Loader from '../loader/Loader';\r\nimport { ErrorTitle } from './Reviews.styled';\r\n\r\nconst Reviews = () => {\r\n  const { movieId } = useParams();\r\n  const [reviews, setReviews] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setReviews([]);\r\n    GetMovieReviews(movieId)\r\n      .then(respRev => {\r\n        return respRev.data.results.length === 0\r\n          ? Promise.reject(\r\n              new Error('We don`t have any reviews for this movie.')\r\n            )\r\n          : setReviews(respRev.data.results);\r\n      })\r\n      .catch(error => setError(error))\r\n      .finally(() => setLoading(false));\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <Loader />}\r\n      {error && <ErrorTitle>{error.message}</ErrorTitle>}\r\n      <ReviewsList reviews={reviews} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Reviews;\r\n"],"names":["GetMovieReviews","movieId","axios","response","List","styled","Text","reviews","map","review","author","content","id","ErrorTitle","useParams","useState","setReviews","loading","setLoading","error","setError","useEffect","then","respRev","data","results","length","Promise","reject","Error","catch","finally","Loader","message"],"sourceRoot":""}