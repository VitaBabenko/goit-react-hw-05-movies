{"version":3,"file":"static/js/722.33013daf.chunk.js","mappings":"wQAEMA,EAAe,mCAAG,WAAMC,GAAN,6EACL,+BACD,mCAFM,SAICC,EAAAA,EAAAA,IAAA,UAHN,+BAGM,kBACAD,EADA,4BAFP,mCAEO,oBAJD,cAIhBE,EAJgB,yBAQfA,GARe,2CAAH,sDAWrB,I,6BCXaC,EAAOC,EAAAA,GAAAA,GAAH,4IASJC,EAAWD,EAAAA,GAAAA,GAAH,sFAMRE,EAAMF,EAAAA,GAAAA,IAAH,2DAKHG,EAAUH,EAAAA,GAAAA,IAAH,wMAQPI,EAAQJ,EAAAA,GAAAA,EAAH,+E,SCIlB,EA9BiB,SAAC,GAAc,IAAZK,EAAW,EAAXA,KAGlB,OACE,SAACN,EAAD,UACGM,EAAKC,KAAI,SAAAC,GAAE,OACV,UAACN,EAAD,YACE,SAACC,EAAD,CACEM,IAAKD,EAAGE,aAAH,UAPC,kCAO8BF,EAAGE,cAAiBC,EACxDC,IAAKJ,EAAGK,QAEV,SAACT,EAAD,WACE,SAACC,EAAD,UAAQG,EAAGK,WANAL,EAAGM,QADR,KAajB,E,UCpBYC,EAAad,EAAAA,GAAAA,GAAH,wJCgCvB,EA3Ba,WACX,IAAQJ,GAAYmB,EAAAA,EAAAA,MAAZnB,QACR,GAAwBoB,EAAAA,EAAAA,UAAS,IAAjC,eAAOX,EAAP,KAAaY,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACRH,GAAW,GACXxB,EAAgBC,GACb2B,MAAK,SAAAC,GACJ,OAAqC,IAA9BA,EAASC,KAAKpB,KAAKqB,OACtBC,QAAQC,OAAO,IAAIC,MAAM,2CACzBZ,EAAQO,EAASC,KAAKpB,KAC3B,IACAyB,OAAM,SAAAV,GAAK,OAAIC,EAASD,EAAb,IACXW,SAAQ,kBAAMZ,GAAW,EAAjB,GACZ,GAAE,CAACvB,KAGF,gCACGsB,IAAW,SAACc,EAAA,EAAD,IACXZ,IAAS,SAACN,EAAD,UAAaM,EAAMa,WAC7B,SAAC,EAAD,CAAU5B,KAAMA,MAGrB,C","sources":["services/GetMovieCredits.jsx","components/castList/CastList.styled.jsx","components/castList/CastList.jsx","components/cast/Cast.styled.jsx","components/cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst GetMovieCredits = async movieId => {\r\n  const BASE_URL = 'https://api.themoviedb.org/3';\r\n  const API_KEY = '2ec93d095b3f7dd7321ac567053c0ad5';\r\n\r\n  const response = await axios.get(\r\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\r\n  );\r\n\r\n  return response;\r\n};\r\n\r\nexport default GetMovieCredits;\r\n","import styled from 'styled-components';\r\n\r\nexport const List = styled.ul`\r\n  list-style: none;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  gap: 25px;\r\n  padding: 0;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 110px;\r\n`;\r\n\r\nexport const Img = styled.img`\r\n  display: block;\r\n  width: 100%;\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  flex-grow: 1;\r\n  border-right: 1px solid lightgray;\r\n  border-bottom: 1px solid lightgray;\r\n  border-left: 1px solid lightgray;\r\n  box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nexport const NameP = styled.p`\r\n  text-align: center;\r\n  margin: 0;\r\n  padding: 10px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport noPoster from '../../images/no-poster.jpg';\r\nimport { List, ListItem, Img, Wrapper, NameP } from './CastList.styled';\r\n\r\nconst CastList = ({ cast }) => {\r\n  const IMG_URL = 'https://image.tmdb.org/t/p/w500';\r\n\r\n  return (\r\n    <List>\r\n      {cast.map(el => (\r\n        <ListItem key={el.cast_id}>\r\n          <Img\r\n            src={el.profile_path ? `${IMG_URL + el.profile_path}` : noPoster}\r\n            alt={el.name}\r\n          />\r\n          <Wrapper>\r\n            <NameP>{el.name}</NameP>\r\n          </Wrapper>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nCastList.propTypes = {\r\n  cast: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      cast_id: PropTypes.number,\r\n      profile_path: PropTypes.string,\r\n      name: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default CastList;\r\n","import styled from 'styled-components';\r\n\r\nexport const ErrorTitle = styled.h2`\r\n  font-size: 15px;\r\n  text-align: center;\r\n  font-family: inherit;\r\n\r\n  @media (min-width: 768px) {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport GetMovieCredits from '../../services/GetMovieCredits';\r\nimport CastList from '../castList/CastList';\r\nimport Loader from '../loader/Loader';\r\nimport { ErrorTitle } from './Cast.styled';\r\n\r\nconst Cast = () => {\r\n  const { movieId } = useParams();\r\n  const [cast, setCast] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    GetMovieCredits(movieId)\r\n      .then(respCast => {\r\n        return respCast.data.cast.length === 0\r\n          ? Promise.reject(new Error('We don`t have any cast for this movie.'))\r\n          : setCast(respCast.data.cast);\r\n      })\r\n      .catch(error => setError(error))\r\n      .finally(() => setLoading(false));\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <Loader />}\r\n      {error && <ErrorTitle>{error.message}</ErrorTitle>}\r\n      <CastList cast={cast} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Cast;\r\n"],"names":["GetMovieCredits","movieId","axios","response","List","styled","ListItem","Img","Wrapper","NameP","cast","map","el","src","profile_path","noPoster","alt","name","cast_id","ErrorTitle","useParams","useState","setCast","loading","setLoading","error","setError","useEffect","then","respCast","data","length","Promise","reject","Error","catch","finally","Loader","message"],"sourceRoot":""}