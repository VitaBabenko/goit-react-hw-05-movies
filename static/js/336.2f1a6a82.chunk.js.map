{"version":3,"file":"static/js/336.2f1a6a82.chunk.js","mappings":"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","sources":["components/buttonUp/ButtonUp.styled.jsx","components/buttonUp/ButtonUp.jsx","components/movieList/MovieList.styled.jsx","components/movieList/MovieList.jsx","pages/movies/Movies.styled.jsx","services/GetSearchMovieByKeyword.jsx","pages/movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const BtnUp = styled.button`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: fixed;\r\n  right: 2%;\r\n  bottom: 10%;\r\n  z-index: 10;\r\n  cursor: pointer;\r\n  background-color: inherit;\r\n  border: none;\r\n\r\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n  &:hover {\r\n    transform: scale(1.15);\r\n    color: red;\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { BsArrowUpCircle } from 'react-icons/bs';\r\nimport { BtnUp } from './ButtonUp.styled';\r\n\r\nconst ButtonTop = ({ onClick }) => {\r\n  return (\r\n    <BtnUp type=\"button\" onClick={onClick}>\r\n      <BsArrowUpCircle size={30} />\r\n    </BtnUp>\r\n  );\r\n};\r\n\r\nButtonTop.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ButtonTop;\r\n","import styled from 'styled-components';\r\n\r\nexport const List = styled.ul`\r\n  display: flex;\r\n  gap: 30px;\r\n  row-gap: 90px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  flex-wrap: wrap;\r\n  list-style: none;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n  width: 210px;\r\n  height: 310px;\r\n  > a {\r\n    width: 210px;\r\n    height: 310px;\r\n    text-decoration: none;\r\n    color: black;\r\n    width: 200px;\r\n\r\n    &:hover {\r\n      color: red;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Img = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  transition: transform 0.25s cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n  &:hover {\r\n    transform: scale(1.02);\r\n  }\r\n`;\r\n\r\nexport const MovieName = styled.p`\r\n  width: 100%;\r\n  font-size: 18px;\r\n  text-align: center;\r\n  margin: 0;\r\n  padding: 10px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport noPoster from '../../images/no-poster.jpg';\r\nimport { List, ListItem, Img, MovieName } from './MovieList.styled';\r\n\r\nconst MovieList = ({ movies }) => {\r\n  const location = useLocation();\r\n\r\n  const IMG_URL = 'https://image.tmdb.org/t/p/w500';\r\n\r\n  return (\r\n    <List>\r\n      {movies.map(movie => (\r\n        <ListItem key={movie.id}>\r\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\r\n            {movie.poster_path !== null && (\r\n              <Img\r\n                src={`${IMG_URL + movie.poster_path}`}\r\n                alt={movie.title}\r\n                width=\"200\"\r\n              />\r\n            )}\r\n            {movie.poster_path === null && (\r\n              <img src={noPoster} alt={movie.title} />\r\n            )}\r\n            <MovieName>\r\n              {movie.title}\r\n              {movie.name}\r\n            </MovieName>\r\n          </Link>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nMovieList.propTypes = {\r\n  movies: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      poster_path: PropTypes.string,\r\n      title: PropTypes.string,\r\n      name: PropTypes.string,\r\n    }).isRequired\r\n  ),\r\n};\r\n\r\nexport default MovieList;\r\n","import styled from 'styled-components';\r\n\r\nexport const Form = styled.form`\r\n  margin-top: 25px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  width: 200px;\r\n  margin-bottom: 20px;\r\n\r\n  @media (min-width: 768px) {\r\n    width: 300px;\r\n    height: 25px;\r\n  }\r\n`;\r\n\r\nexport const Btn = styled.button`\r\n  cursor: pointer;\r\n  height: 25px;\r\n`;\r\n\r\nexport const ErrorMessage = styled.h2`\r\n  font-family: inherit;\r\n  text-align: center;\r\n  font-size: 15px;\r\n  margin-top: 40px;\r\n\r\n  @media (min-width: 768px) {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n","import axios from 'axios';\r\n\r\nconst GetSearchMovieByKeyword = async searchQuery => {\r\n  const BASE_URL = 'https://api.themoviedb.org/3';\r\n  const API_KEY = '2ec93d095b3f7dd7321ac567053c0ad5';\r\n\r\n  const response = await axios.get(\r\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}&language=en-US&page=1&include_adult=false`\r\n  );\r\n\r\n  return response;\r\n};\r\n\r\nexport default GetSearchMovieByKeyword;\r\n","import { useSearchParams } from 'react-router-dom';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { useWindowScroll } from 'react-use';\r\nimport Loader from '../../components/loader/Loader';\r\nimport MovieList from '../../components/movieList/MovieList';\r\nimport ButtonUp from '../../components/buttonUp/ButtonUp';\r\nimport { Form, Input, Btn, ErrorMessage } from './Movies.styled';\r\nimport GetSearchMovieByKeyword from '../../services/GetSearchMovieByKeyword';\r\n\r\nconst Movies = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const movieId = searchParams.get('movieId') ?? '';\r\n  const BtnRef = useRef();\r\n  const { y } = useWindowScroll();\r\n\r\n  useEffect(() => {\r\n    if (!movieId) {\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    GetSearchMovieByKeyword(movieId.trim())\r\n      .then(respData => {\r\n        if (respData.data.total_results === 0) {\r\n          return Promise.reject(\r\n            new Error(\r\n              'Sorry, there are no movies matching your search query. Please try again.'\r\n            )\r\n          );\r\n        }\r\n        return setMovies(respData.data.results);\r\n      })\r\n      .catch(error => {\r\n        setError(error);\r\n      })\r\n      .finally(() => setLoading(false));\r\n  }, [movieId]);\r\n\r\n  const updateQueryString = evt => {\r\n    evt.preventDefault();\r\n    setMovies([]);\r\n    const movieIdValue = evt.currentTarget.elements.movieId.value;\r\n    if (movieIdValue.trim() === '') {\r\n      setSearchParams({});\r\n      alert('Fill out the field, please.');\r\n      return;\r\n    }\r\n    setError(null);\r\n    setSearchParams({ movieId: movieIdValue });\r\n    evt.currentTarget.reset();\r\n  };\r\n\r\n  const handleButtonTop = () => {\r\n    const { top } = BtnRef.current.getBoundingClientRect();\r\n    window.scrollTo({\r\n      top,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={updateQueryString} ref={BtnRef}>\r\n        <Input\r\n          type=\"text\"\r\n          name=\"movieId\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search movies\"\r\n        />\r\n        <Btn type=\"submit\">\r\n          <span>Search</span>\r\n        </Btn>\r\n      </Form>\r\n      {loading && <Loader />}\r\n      {error && <ErrorMessage>{error.message}</ErrorMessage>}\r\n      {!error && !loading && <MovieList movies={movies} />}\r\n      {y > 500 && <ButtonUp onClick={handleButtonTop} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n"],"names":["BtnUp","styled","onClick","type","size","List","ListItem","Img","MovieName","movies","location","useLocation","map","movie","to","id","state","from","poster_path","src","alt","title","width","noPoster","name","Form","Input","Btn","ErrorMessage","GetSearchMovieByKeyword","searchQuery","axios","response","useState","setMovies","loading","setLoading","error","setError","useSearchParams","searchParams","setSearchParams","movieId","get","BtnRef","useRef","y","useWindowScroll","useEffect","trim","then","respData","data","total_results","Promise","reject","Error","results","catch","finally","onSubmit","evt","preventDefault","movieIdValue","currentTarget","elements","value","alert","reset","ref","autoComplete","autoFocus","placeholder","Loader","message","MovieList","ButtonUp","top","current","getBoundingClientRect","window","scrollTo","behavior"],"sourceRoot":""}