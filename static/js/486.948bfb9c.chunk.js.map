{"version":3,"file":"static/js/486.948bfb9c.chunk.js","mappings":"0MAEaA,E,QAAWC,GAAAA,GAAH,sJ,SCoBrB,EAnBkB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MAEjB,OADAC,QAAQC,IAAIH,IAEV,wBACGD,EAAOK,KAAI,SAAAC,GAAK,OACf,SAACR,EAAD,WACE,SAAC,KAAD,CAAMS,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMT,GAAhD,UACE,yBACGK,EAAMK,MACNL,EAAMM,WAJEN,EAAME,GADN,KAYtB,C,iKClBKK,EAAuB,mCAAG,WAAMC,GAAN,6EACb,+BACD,mCAFc,SAIPC,EAAAA,EAAAA,IAAA,UAHN,+BAGM,iCAFP,mCAEO,kBACgCD,EADhC,+CAJO,cAIxBE,EAJwB,yBAQvBA,GARuB,2CAAH,sDAW7B,I,SCuDA,EA9De,WAAO,IAAD,EACnB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOjB,EAAP,KAAekB,EAAf,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAO,UAAGF,EAAaG,IAAI,kBAApB,QAAkC,GAE/CxB,QAAQC,IAAIsB,IAEZE,EAAAA,EAAAA,YAAU,WACHF,IAILN,GAAW,GAEXS,YAAW,WACThB,EAAwBa,GACrBI,MAAK,SAAAC,GACJ5B,QAAQC,IAAI2B,EAASC,KAAKC,SAC1Bf,EAAUa,EAASC,KAAKC,QACzB,IACAC,OAAM,SAAAb,GACLC,EAASD,EACV,IACAc,SAAQ,kBAAMf,GAAW,EAAjB,GACZ,GAAE,KACJ,GAAE,CAACM,IAcJ,OACE,iCACE,kBAAMU,SAdgB,SAAAC,GACxBA,EAAIC,iBACJ,IAAMC,EAAeF,EAAIG,cAAcC,SAASf,QAAQgB,MACxD,GAAqB,KAAjBH,EAGF,OAFAd,EAAgB,CAAC,QACjBkB,MAAM,+BAGRlB,EAAgB,CAAEC,QAASa,IAC3BF,EAAIG,cAAcI,OACnB,EAIG,WACE,kBACEC,KAAK,OACLjC,KAAK,UACLkC,aAAa,MACbC,WAAS,EACTC,YAAY,mBAEd,mBAAQH,KAAK,SAAb,UACE,0CAGH1B,IAAW,SAAC8B,EAAA,EAAD,IACX5B,IAAS,wBAAKA,EAAM6B,UACpBlD,IAAWmB,IAAW,SAACgC,EAAA,EAAD,CAAWnD,OAAQA,MAG/C,C","sources":["components/movieList/MovieList.styled.jsx","components/movieList/MovieList.jsx","services/GetSearchMovieByKeyword.jsx","pages/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  > a {\n    text-decoration: none;\n    color: black;\n    font-size: 18px;\n\n    &:hover {\n      color: red;\n    }\n  }\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { ListItem } from './MovieList.styled';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  console.log(location);\n  return (\n    <ul>\n      {movies.map(movie => (\n        <ListItem key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n            <p>\n              {movie.title}\n              {movie.name}\n            </p>\n          </Link>\n        </ListItem>\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import axios from 'axios';\n\nconst GetSearchMovieByKeyword = async searchQuery => {\n  const BASE_URL = 'https://api.themoviedb.org/3';\n  const API_KEY = '2ec93d095b3f7dd7321ac567053c0ad5';\n\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}&language=en-US&page=1&include_adult=false`\n  );\n\n  return response;\n};\n\nexport default GetSearchMovieByKeyword;\n","import { useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Loader from '../components/loader/Loader';\nimport MovieList from '../components/movieList/MovieList';\nimport GetSearchMovieByKeyword from '../services/GetSearchMovieByKeyword';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieId = searchParams.get('movieId') ?? '';\n\n  console.log(movieId);\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    setLoading(true);\n\n    setTimeout(() => {\n      GetSearchMovieByKeyword(movieId)\n        .then(respData => {\n          console.log(respData.data.results);\n          setMovies(respData.data.results);\n        })\n        .catch(error => {\n          setError(error);\n        })\n        .finally(() => setLoading(false));\n    }, 2000);\n  }, [movieId]);\n\n  const updateQueryString = evt => {\n    evt.preventDefault();\n    const movieIdValue = evt.currentTarget.elements.movieId.value;\n    if (movieIdValue === '') {\n      setSearchParams({});\n      alert('Fill out the field, please.');\n      return;\n    }\n    setSearchParams({ movieId: movieIdValue });\n    evt.currentTarget.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={updateQueryString}>\n        <input\n          type=\"text\"\n          name=\"movieId\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n        <button type=\"submit\">\n          <span>Search</span>\n        </button>\n      </form>\n      {loading && <Loader />}\n      {error && <h2>{error.message}</h2>}\n      {movies && !loading && <MovieList movies={movies} />}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["ListItem","styled","movies","location","useLocation","console","log","map","movie","to","id","state","from","title","name","GetSearchMovieByKeyword","searchQuery","axios","response","useState","setMovies","loading","setLoading","error","setError","useSearchParams","searchParams","setSearchParams","movieId","get","useEffect","setTimeout","then","respData","data","results","catch","finally","onSubmit","evt","preventDefault","movieIdValue","currentTarget","elements","value","alert","reset","type","autoComplete","autoFocus","placeholder","Loader","message","MovieList"],"sourceRoot":""}