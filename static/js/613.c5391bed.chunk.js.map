{"version":3,"file":"static/js/613.c5391bed.chunk.js","mappings":"4PAEMA,EAAe,mCAAG,WAAMC,GAAN,6EACL,+BACD,mCAFM,SAICC,EAAAA,EAAAA,IAAA,UAHN,+BAGM,kBACAD,EADA,4BAFP,mCAEO,2BAJD,cAIhBE,EAJgB,yBAQfA,GARe,2CAAH,sDAWrB,I,SCAA,EAboB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OACE,wBACGA,EAAQC,KAAI,SAAAC,GAAM,OACjB,2BACE,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFJF,EAAOG,GADC,KAQxB,E,UC2BD,EAhCgB,WACd,IAAQR,GAAYS,EAAAA,EAAAA,MAAZT,QACR,GAA8BU,EAAAA,EAAAA,UAAS,IAAvC,eAAOP,EAAP,KAAgBQ,EAAhB,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACRH,GAAW,GACXF,EAAW,IAEXZ,EAAgBC,GACbiB,MAAK,SAAAC,GAEJ,OADAC,QAAQC,IAAIF,EAAQG,KAAKC,SACc,IAAhCJ,EAAQG,KAAKC,QAAQC,OACxBC,QAAQC,OACN,IAAIC,MAAM,8CAEZf,EAAWO,EAAQG,KAAKC,QAC7B,IACAK,OAAM,SAAAb,GAAK,OAAIC,EAASD,EAAb,IACXc,SAAQ,kBAAMf,GAAW,EAAjB,GACZ,GAAE,CAACb,KAGF,gCACGY,IAAW,SAACiB,EAAA,EAAD,IACXf,IAAS,wBAAKA,EAAMgB,WACrB,SAAC,EAAD,CAAa3B,QAASA,MAG3B,C","sources":["services/GetMovieReviews.jsx","components/ReviewsList.jsx","components/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst GetMovieReviews = async movieId => {\n  const BASE_URL = 'https://api.themoviedb.org/3';\n  const API_KEY = '2ec93d095b3f7dd7321ac567053c0ad5';\n\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return response;\n};\n\nexport default GetMovieReviews;\n","const ReviewsList = ({ reviews }) => {\n  return (\n    <ul>\n      {reviews.map(review => (\n        <li key={review.id}>\n          <h3>{review.author}</h3>\n          <p>{review.content}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ReviewsList;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport GetMovieReviews from '../services/GetMovieReviews';\nimport ReviewsList from './ReviewsList';\nimport Loader from './loader/Loader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    setReviews([]);\n\n    GetMovieReviews(movieId)\n      .then(respRev => {\n        console.log(respRev.data.results);\n        return respRev.data.results.length === 0\n          ? Promise.reject(\n              new Error('We don`t have any reviews for this movie.')\n            )\n          : setReviews(respRev.data.results);\n      })\n      .catch(error => setError(error))\n      .finally(() => setLoading(false));\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {error && <h2>{error.message}</h2>}\n      <ReviewsList reviews={reviews} />\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["GetMovieReviews","movieId","axios","response","reviews","map","review","author","content","id","useParams","useState","setReviews","loading","setLoading","error","setError","useEffect","then","respRev","console","log","data","results","length","Promise","reject","Error","catch","finally","Loader","message"],"sourceRoot":""}